const Discord = require('discord.js');
const { MessageActionRow, MessageButton } = require('discord.js');

module.exports = async (options) => {
try {
  if (!options.message) {
		throw new Error('Leaf-utils: message argument was not specified.');
	}
	if (typeof options.message !== 'object') {
		throw new TypeError('Leaf-utils: Invalid Discord Message was provided.');
	}

    if (!options.buttons) options.buttons = {};
	if (typeof options.buttons !== 'object') {
		throw new TypeError('Leaf-utils: buttons must be an object.');
	}

	if (!options.buttons.heads) {
		options.buttons.heads = 'Heads';
	}
	if (typeof options.buttons.heads !== 'string') {
		throw new Error('Leaf-utils: Heads button text must be a string.');
	}

	if (!options.buttons.tails) {
		options.buttons.tails = 'Tails';
	}

  if (typeof options.buttons.tails !== 'string') {
		throw new Error('Leaf-utils: Tails button text must be a string.');
	}

  if (!options.colors) options.colors = {};
	if (typeof options.colors !== 'object') {
		throw new TypeError('Leaf-utils: colors must be an object.');
	}

  if (!options.colors.heads) options.colors.heads = 'DANGER';
	if (typeof options.colors.heads !== 'string') {
		throw new TypeError('Leaf-utils: heads color must be a string.');
	}

  if (!options.colors.tails) options.colors.tails = 'PRIMARY';
	if (typeof options.colors.tails !== 'string') {
		throw new TypeError('Leaf-utils: tails color must be a string.');
	}

  	if (!options.startMessage) {
		options.startMessage =
			'The coin is in the air Choose heads or tails below.';
	}
	if (typeof options.startMessage !== 'string') {
		throw new TypeError('Leaf-utils: startMessage must be a string.');
	}

  	if (!options.winMessage) {
		options.winMessage =
			'GG, <@{{winner}}> The coin landed on **{{result}}**';
	}
	if (typeof options.winMessage !== 'string') {
		throw new TypeError('Leaf-utils: winMessage must be a string.');
	}

  if (!options.loseMessage) {
		options.loseMessage =
			'<@{{player}}> You lose The coin landed on **{{result}}**';
	}
	if (typeof options.loseMessage !== 'string') {
		throw new TypeError('Leaf-utils: loseMessage must be a string.');
	}

const choice = ['heads', 'tails']  
const rand = choice[Math.floor(Math.random() * choice.length)];

const row1 = new MessageActionRow()
			.addComponents(
        new MessageButton()
.setStyle(options.colors.heads)
.setLabel(options.buttons.heads)
.setCustomId('cf1'),
new MessageButton()
.setStyle(options.colors.tails)
.setLabel(options.buttons.tails)
.setCustomId('cf2')
      )

const row2 = new MessageActionRow()
			.addComponents(
        new MessageButton()
.setStyle(options.colors.heads)
.setLabel(options.buttons.heads)
.setCustomId('cf3') 
.setDisabled(),
        new MessageButton()
.setStyle(options.colors.tails)
.setLabel(options.buttons.tails)
.setCustomId('cf4')
.setDisabled()
      )

await options.message.channel.send({ content: options.startMessage, 
components: [row1]}).then(async m =>{
 const filter = (mes) => mes.user.id === options.message.author.id;
 const collector = await m.createMessageComponentCollector({filter: filter, componentType: 'BUTTON', max: 1});

 collector.on("collect", async b =>{
     await b.deferUpdate()
     if(b.customId === 'cf1'){
        if(rand === 'heads'){
           await b.editReply({ content: options.winMessage
            .replace('{{winner}}', b.user.id)
            .replace('{{result}}', rand),  components: [row2]})
        } else {
            await b.editReply({ content: options.loseMessage
            .replace('{{player}}', b.user.id)
            .replace('{{result}}', rand),  components: [row2]})
        }
     } else if(b.customId === 'cf2'){
         if(rand === 'tails'){
            await b.editReply({ content: options.winMessage
            .replace('{{winner}}', b.user.id)
            .replace('{{result}}', rand), components: [row2] })
         } else {
             await b.editReply({ content: options.loseMessage
            .replace('{{player}}', b.user.id)
            .replace('{{result}}', rand),  components: [row2]})
         }
      }


 })

})

} catch (err) {
    console.log(`Error Occured. | Coinflip | Error: ${err.stack}`);
  }
}